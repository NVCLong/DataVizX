{"version":3,"sources":["../../src/getClassName.js"],"names":[],"mappings":"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","file":"getClassName.js","sourcesContent":["// @flow\n\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType,\n  HandleMissingStyleNameOptionType,\n  GetClassNameOptionsType\n} from './types';\nimport optionsDefaults from './schemas/optionsDefaults';\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst handleError = (message: string, handleMissingStyleName: HandleMissingStyleNameOptionType): null => {\n  if (handleMissingStyleName === 'throw') {\n    throw new Error(message);\n  } else if (handleMissingStyleName === 'warn') {\n    // eslint-disable-next-line no-console\n    console.warn(message);\n  }\n\n  return null;\n};\n\nconst getClassNameForNamespacedStyleName = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\n): ?string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = handleMissingStyleNameOption ||\n    optionsDefaults.handleMissingStyleName;\n\n  if (!moduleName) {\n    return handleError('Invalid style name: ' + styleName, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    return handleError('CSS module import does not exist: ' + importName, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    return handleError('CSS module does not exist: ' + moduleName, handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\nconst getClassNameFromMultipleImports = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\n): ?string => {\n  const handleMissingStyleName = handleMissingStyleNameOption ||\n    optionsDefaults.handleMissingStyleName;\n\n  const importKeysWithMatches = Object.keys(styleModuleImportMap)\n    .map((importKey) => {\n      return styleModuleImportMap[importKey][styleName] && importKey;\n    })\n    .filter((importKey) => {\n      return importKey;\n    });\n\n  if (importKeysWithMatches.length > 1) {\n    throw new Error('Cannot resolve styleName \"' + styleName + '\" because it is present in multiple imports:' +\n      '\\n\\n\\t' + importKeysWithMatches.join('\\n\\t') +\n      '\\n\\nYou can resolve this by using a named import, e.g:' +\n      '\\n\\n\\timport foo from \"' + importKeysWithMatches[0] + '\";' +\n      '\\n\\t<div styleName=\"foo.' + styleName + '\" />' +\n      '\\n\\n');\n  }\n\n  if (importKeysWithMatches.length === 0) {\n    return handleError('Could not resolve the styleName \\'' + styleName + '\\'.', handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importKeysWithMatches[0]][styleName];\n};\n\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: GetClassNameOptionsType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  const {\n    handleMissingStyleName = optionsDefaults.handleMissingStyleName,\n    autoResolveMultipleImports = optionsDefaults.autoResolveMultipleImports\n  } = options || {};\n\n  if (!styleNameValue) {\n    return '';\n  }\n\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => {\n      return styleName;\n    })\n    .map((styleName) => {\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n      }\n\n      if (styleModuleImportMapKeys.length === 0) {\n        throw new Error('Cannot use styleName attribute for style name \\'' + styleName +\n          '\\' without importing at least one stylesheet.');\n      }\n\n      if (styleModuleImportMapKeys.length > 1) {\n        if (!autoResolveMultipleImports) {\n          throw new Error('Cannot use anonymous style name \\'' + styleName +\n            '\\' with more than one stylesheet import without setting \\'autoResolveMultipleImports\\' to true.');\n        }\n\n        return getClassNameFromMultipleImports(styleName, styleModuleImportMap, handleMissingStyleName);\n      }\n\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n      if (!styleModuleMap[styleName]) {\n        return handleError('Could not resolve the styleName \\'' + styleName + '\\'.', handleMissingStyleName);\n      }\n\n      return styleModuleMap[styleName];\n    })\n    .filter((className) => {\n      // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n      return className;\n    })\n    .join(' ');\n};\n"]}