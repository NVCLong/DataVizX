{"version":3,"file":"util.js","names":["_path","require","_fs","rURL","rProto","rDataURI","isAbsoluteURL","uri","test","isDataURI","pathResolve","path","p","replace","v","rebaseURL","from","to","fb","fp","match","tp","te","sourceMapMappings","map","sections","e","sourceMapRebase","base","mapping","sourceRoot","pathRelativeIfSub","pre","pathJoin","substring","length","stringAbbrev","str","max","suffix","decodeURISafe","decodeURI","err","stringOrBufferCast","data","args","toString","readFileAsync","options","r","Promise","resolve","reject","readFile"],"sources":["../src/util.mjs"],"sourcesContent":["import {join as pathJoin} from 'path';\nimport {readFile} from 'fs';\n\nconst rURL = /^([a-z][a-z0-9.-]*:\\/?\\/?[^/]*|\\/\\/[^/]*|)([^?#]*)(.*)$/i;\nconst rProto = /^[a-z][a-z0-9-.]*:/i;\nconst rDataURI = /^data:/i;\n\n/**\n * Check if absolute URL.\n *\n * @param {string} uri URL strng.\n * @returns {boolean} Is absolute.\n */\nexport function isAbsoluteURL(uri) {\n\treturn uri[0] === '/' || rProto.test(uri);\n}\n\n/**\n * Check if data URI.\n *\n * @param {string} uri URI strng.\n * @returns {boolean} Is a data URI.\n */\nexport function isDataURI(uri) {\n\treturn rDataURI.test(uri);\n}\n\n/**\n * Clean a URL path of extra dot notation.\n *\n * @param {string} path URL pathname.\n * @returns Normalized pathname.\n */\nexport function pathResolve(path) {\n\tlet p = path;\n\t// Multiple slashes to slash.\n\tp = p.replace(/\\/\\/+/g, '/');\n\t// Dot slash.\n\tp = p.replace(/^(\\.\\/)+/, '');\n\t// Trailing slash dot to slash.\n\tp = p.replace(/\\/\\.$/, '/');\n\t// Dot slash path components.\n\tp = p.replace(/\\/(\\.\\/)+/g, '/');\n\tfor (;;) {\n\t\t// Leading, middle, and trailing, dot dot slash resolving.\n\t\tconst v = p.replace(/(^|\\/)(?!\\.\\.)[^/]+\\/\\.\\.(\\/|$)/g, '$1');\n\t\tif (v === p) {\n\t\t\tbreak;\n\t\t}\n\t\tp = v;\n\t}\n\treturn p === '.' ? '' : p;\n}\n\n/**\n * Rebase a URL path.\n *\n * @param {string} from From path.\n * @param {string} to To path.\n * @returns {string} Full path.\n */\nexport function rebaseURL(from, to) {\n\tif (isAbsoluteURL(to) || isDataURI(to)) {\n\t\treturn to;\n\t}\n\tconst [, fb, fp] = from.match(rURL);\n\tconst [, , tp, te] = to.match(rURL);\n\tconst path = tp ? pathResolve(fp.replace(/[^/]+$/, '') + tp) : fp;\n\treturn fb + (fb && path[0] !== '/' ? '/' : '') + path + te;\n}\n\n/**\n * Get source mappings maps.\n *\n * @param {object} map Map object.\n * @returns {Array} Maps array.\n */\nexport function sourceMapMappings(map) {\n\tconst {sections} = map;\n\treturn sections ? sections.map(e => e.map) : [map];\n}\n\n/**\n * Rebase source mappings sourceRoot.\n *\n * @param {object} map Map object.\n * @param {string} base Base path.\n */\nexport function sourceMapRebase(map, base) {\n\tfor (const mapping of sourceMapMappings(map)) {\n\t\tmapping.sourceRoot = rebaseURL(base, mapping.sourceRoot || '.');\n\t}\n}\n\n/**\n * Get relative path if a subpath, else unchaged.\n *\n * @param {string} from From path.\n * @param {string} to To path.\n * @returns {string} Resulting path.\n */\nexport function pathRelativeIfSub(from, to) {\n\tif (from === to) {\n\t\treturn '';\n\t}\n\tif (!from) {\n\t\treturn to;\n\t}\n\tconst pre = pathJoin(from, '_').replace(/_$/, '');\n\treturn to.substring(0, pre.length) === pre ? to.substring(pre.length) : to;\n}\n\n/**\n * Abbreviate a string if too long.\n *\n * @param {string} str String.\n * @param {number} max String max length.\n * @param {string} suffix Suffix to use if too long.\n * @returns {string} Abbreviated or original string.\n */\nexport function stringAbbrev(str, max, suffix = '') {\n\treturn str.length > max\n\t\t? str.substring(0, max - suffix.length) + suffix\n\t\t: str;\n}\n\n/**\n * Decode URL returning null on error.\n *\n * @param {string} str The string to decode.\n * @returns {string|null} Decoded string or null.\n */\nexport function decodeURISafe(str) {\n\ttry {\n\t\treturn decodeURI(str);\n\t} catch (err) {\n\t\t// Do nothing.\n\t}\n\treturn null;\n}\n\n/**\n * Convert string or Buffer to string.\n *\n * @param {string|Buffer} data String or Buffer data.\n * @param {Array} args Optional arguments to pass to Buffer toString method.\n * @returns {string} String value.\n */\nexport function stringOrBufferCast(data, ...args) {\n\tif (typeof data === 'string') {\n\t\treturn data;\n\t}\n\treturn data.toString(...args);\n}\n\n/**\n * Read a file asyncronousely.\n *\n * @param {string} path File path.\n * @param {string|object} options File read options.\n * @returns {Buffer|string} The file data.\n */\nexport function readFileAsync(path, options) {\n\tconst r = new Promise((resolve, reject) => {\n\t\treadFile(path, options, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresolve(data);\n\t\t});\n\t});\n\treturn r;\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,GAAA,GAAAD,OAAA;AAEA,MAAME,IAAI,GAAG,0DAA0D;AACvE,MAAMC,MAAM,GAAG,qBAAqB;AACpC,MAAMC,QAAQ,GAAG,SAAS;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CAACC,GAAG,EAAE;EAClC,OAAOA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIH,MAAM,CAACI,IAAI,CAACD,GAAG,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,SAASA,CAACF,GAAG,EAAE;EAC9B,OAAOF,QAAQ,CAACG,IAAI,CAACD,GAAG,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,WAAWA,CAACC,IAAI,EAAE;EACjC,IAAIC,CAAC,GAAGD,IAAI;EACZ;EACAC,CAAC,GAAGA,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;EAC5B;EACAD,CAAC,GAAGA,CAAC,CAACC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EAC7B;EACAD,CAAC,GAAGA,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;EAC3B;EACAD,CAAC,GAAGA,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;EAChC,SAAS;IACR;IACA,MAAMC,CAAC,GAAGF,CAAC,CAACC,OAAO,CAAC,kCAAkC,EAAE,IAAI,CAAC;IAC7D,IAAIC,CAAC,KAAKF,CAAC,EAAE;MACZ;IACD;IACAA,CAAC,GAAGE,CAAC;EACN;EACA,OAAOF,CAAC,KAAK,GAAG,GAAG,EAAE,GAAGA,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,SAASA,CAACC,IAAI,EAAEC,EAAE,EAAE;EACnC,IAAIX,aAAa,CAACW,EAAE,CAAC,IAAIR,SAAS,CAACQ,EAAE,CAAC,EAAE;IACvC,OAAOA,EAAE;EACV;EACA,MAAM,GAAGC,EAAE,EAAEC,EAAE,CAAC,GAAGH,IAAI,CAACI,KAAK,CAACjB,IAAI,CAAC;EACnC,MAAM,IAAKkB,EAAE,EAAEC,EAAE,CAAC,GAAGL,EAAE,CAACG,KAAK,CAACjB,IAAI,CAAC;EACnC,MAAMQ,IAAI,GAAGU,EAAE,GAAGX,WAAW,CAACS,EAAE,CAACN,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAGQ,EAAE,CAAC,GAAGF,EAAE;EACjE,OAAOD,EAAE,IAAIA,EAAE,IAAIP,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAGA,IAAI,GAAGW,EAAE;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,iBAAiBA,CAACC,GAAG,EAAE;EACtC,MAAM;IAACC;EAAQ,CAAC,GAAGD,GAAG;EACtB,OAAOC,QAAQ,GAAGA,QAAQ,CAACD,GAAG,CAACE,CAAC,IAAIA,CAAC,CAACF,GAAG,CAAC,GAAG,CAACA,GAAG,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,eAAeA,CAACH,GAAG,EAAEI,IAAI,EAAE;EAC1C,KAAK,MAAMC,OAAO,IAAIN,iBAAiB,CAACC,GAAG,CAAC,EAAE;IAC7CK,OAAO,CAACC,UAAU,GAAGf,SAAS,CAACa,IAAI,EAAEC,OAAO,CAACC,UAAU,IAAI,GAAG,CAAC;EAChE;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,iBAAiBA,CAACf,IAAI,EAAEC,EAAE,EAAE;EAC3C,IAAID,IAAI,KAAKC,EAAE,EAAE;IAChB,OAAO,EAAE;EACV;EACA,IAAI,CAACD,IAAI,EAAE;IACV,OAAOC,EAAE;EACV;EACA,MAAMe,GAAG,GAAG,IAAAC,UAAQ,EAACjB,IAAI,EAAE,GAAG,CAAC,CAACH,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EACjD,OAAOI,EAAE,CAACiB,SAAS,CAAC,CAAC,EAAEF,GAAG,CAACG,MAAM,CAAC,KAAKH,GAAG,GAAGf,EAAE,CAACiB,SAAS,CAACF,GAAG,CAACG,MAAM,CAAC,GAAGlB,EAAE;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASmB,YAAYA,CAACC,GAAG,EAAEC,GAAG,EAAEC,MAAM,GAAG,EAAE,EAAE;EACnD,OAAOF,GAAG,CAACF,MAAM,GAAGG,GAAG,GACpBD,GAAG,CAACH,SAAS,CAAC,CAAC,EAAEI,GAAG,GAAGC,MAAM,CAACJ,MAAM,CAAC,GAAGI,MAAM,GAC9CF,GAAG;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,aAAaA,CAACH,GAAG,EAAE;EAClC,IAAI;IACH,OAAOI,SAAS,CAACJ,GAAG,CAAC;EACtB,CAAC,CAAC,OAAOK,GAAG,EAAE;IACb;EAAA;EAED,OAAO,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,kBAAkBA,CAACC,IAAI,EAAE,GAAGC,IAAI,EAAE;EACjD,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC7B,OAAOA,IAAI;EACZ;EACA,OAAOA,IAAI,CAACE,QAAQ,CAAC,GAAGD,IAAI,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,aAAaA,CAACpC,IAAI,EAAEqC,OAAO,EAAE;EAC5C,MAAMC,CAAC,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC1C,IAAAC,YAAQ,EAAC1C,IAAI,EAAEqC,OAAO,EAAE,CAACN,GAAG,EAAEE,IAAI,KAAK;MACtC,IAAIF,GAAG,EAAE;QACRU,MAAM,CAACV,GAAG,CAAC;QACX;MACD;MACAS,OAAO,CAACP,IAAI,CAAC;IACd,CAAC,CAAC;EACH,CAAC,CAAC;EACF,OAAOK,CAAC;AACT"}