{"version":3,"file":"index.js","names":["_meta","require","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_path","_loaderUtils","_interopRequireDefault","_util","_uri","_exception","_comment","obj","__esModule","default","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","createResolver","res","_ref","context","request","r","result","_x","_x2","createResolverMulti","resolver","_ref2","requests","_x3","_x4","_default","_x5","_x6","_x7","_ref3","source","map","meta","callback","async","addDependency","emitWarning","sourceMap","rootContext","resourcePath","resolverMulti","sourceString","stringOrBufferCast","Exception","parsed","commentParse","body","mapFile","mapInfo","mapCode","isDataURI","url","stringAbbrev","dataURI","data","toString","charset","mapPath","replace","mapPaths","commentPathsFromURL","mapPathsRequest","p","loaderUtils","urlToRequest","resolved","readFileAsync","mapFileContext","pathDirname","mapData","JSON","parse","mapMappings","sourceMapMappings","mapping","sources","sourceRoot","sourcesContent","i","length","sourceContent","sourcePath","sourceRequest","sourceCode","mapFilePath","pathRelativeIfSub","sourceMapRebase"],"sources":["../src/index.mjs"],"sourcesContent":["export * from './meta';\n\nimport {dirname as pathDirname} from 'path';\n\nimport loaderUtils from 'loader-utils';\n\nimport {\n\tisDataURI,\n\tsourceMapMappings,\n\tsourceMapRebase,\n\tpathRelativeIfSub,\n\tstringAbbrev,\n\tstringOrBufferCast,\n\treadFileAsync\n} from './util';\nimport {data} from './uri';\nimport {Exception} from './exception';\nimport {\n\tparse as commentParse,\n\tpathsFromURL as commentPathsFromURL\n} from './comment';\n\n/**\n * Create resolver.\n *\n * @param {Function} resolve Resolve function.\n * @returns {Function} Resolve function.\n */\nfunction createResolver(resolve) {\n\tconst res = resolve;\n\treturn async function (context, request) {\n\t\tconst r = await new Promise((resolve, reject) => {\n\t\t\tres(context, request, (err, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t});\n\t\treturn r;\n\t};\n}\n\n/**\n * Create resolver multiple from a resolver.\n *\n * @param {Function} resolver Resolve function.\n * @returns {Function} Resolve function.\n */\nfunction createResolverMulti(resolver) {\n\treturn async function (context, requests) {\n\t\tfor (const request of requests) {\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\treturn await resolver(context, request);\n\t\t\t} catch (err) {\n\t\t\t\t// Do nothing.\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n}\n\n// eslint-disable-next-line import/no-default-export, jsdoc/require-jsdoc, no-unused-vars\nexport default async function (source, map, meta) {\n\t// eslint-disable-next-line no-invalid-this\n\tconst self = this;\n\n\tconst callback = self.async();\n\n\tconst {\n\t\tresolve,\n\t\taddDependency,\n\t\temitWarning,\n\t\tsourceMap,\n\t\tcontext,\n\t\trootContext,\n\t\tresourcePath\n\t} = self;\n\n\tconst resolver = createResolver(resolve);\n\tconst resolverMulti = createResolverMulti(resolver);\n\n\t// If passed a buffer then convert to a string or emit warning and skip.\n\tlet sourceString = null;\n\ttry {\n\t\tsourceString = stringOrBufferCast(source, 'utf8');\n\t} catch (err) {\n\t\temitWarning(new Exception(`Failed to cast source to string: ${err}`));\n\t\t// eslint-disable-next-line prefer-rest-params\n\t\tcallback(null, ...arguments);\n\t\treturn;\n\t}\n\n\t// Parse source map comment or pass the arguments straight through.\n\tconst parsed = commentParse(sourceString);\n\tif (!parsed) {\n\t\t// eslint-disable-next-line prefer-rest-params\n\t\tcallback(null, ...arguments);\n\t\treturn;\n\t}\n\n\t// If no source map requested, just output code without comment.\n\tif (!sourceMap) {\n\t\tcallback(null, parsed.body);\n\t\treturn;\n\t}\n\n\tlet mapFile = null;\n\tlet mapInfo = null;\n\tlet mapCode = null;\n\n\t// Check if data URI.\n\tif (isDataURI(parsed.url)) {\n\t\tmapInfo = stringAbbrev(parsed.url, 64, '...');\n\n\t\t// Attempt to parse URL as a data URI.\n\t\tconst dataURI = data(parsed.url);\n\t\tif (!dataURI) {\n\t\t\temitWarning(new Exception(`Failed to parse data URI: ${mapInfo}`));\n\t\t\tcallback(null, parsed.body);\n\t\t\treturn;\n\t\t}\n\n\t\t// Attempt to decode source map content.\n\t\ttry {\n\t\t\tmapCode = dataURI.body().toString(dataURI.charset);\n\t\t} catch (err) {\n\t\t\temitWarning(\n\t\t\t\tnew Exception(`Failed to decode data URI: ${mapInfo}: ${err}`)\n\t\t\t);\n\t\t\tcallback(null, parsed.body);\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember which file the source map came from.\n\t\tmapFile = resourcePath;\n\t} else {\n\t\tmapInfo = parsed.url;\n\n\t\t// Remove file protocol from the URL if present.\n\t\tconst mapPath = parsed.url.replace(/^file:\\/\\//i, '');\n\n\t\t// Create list of possible file paths.\n\t\t// Compensates for comments that may not be encoded to spec.\n\t\tconst mapPaths = commentPathsFromURL(mapPath);\n\n\t\t// Convert those paths to resolvable paths.\n\t\tconst mapPathsRequest = mapPaths.map(p => loaderUtils.urlToRequest(p));\n\n\t\t// Resolve the first one that exists or null.\n\t\tconst resolved = await resolverMulti(context, mapPathsRequest);\n\n\t\t// If file not resolved emit warning and skip.\n\t\tif (!resolved) {\n\t\t\temitWarning(\n\t\t\t\tnew Exception(`Failed to resolve source map: ${mapInfo}`)\n\t\t\t);\n\t\t\tcallback(null, parsed.body);\n\t\t\treturn;\n\t\t}\n\n\t\t// Add the file as a dependency.\n\t\taddDependency(resolved);\n\n\t\t// Read the file or emit warning and skip.\n\t\ttry {\n\t\t\tmapCode = await readFileAsync(resolved, 'utf-8');\n\t\t} catch (err) {\n\t\t\temitWarning(\n\t\t\t\tnew Exception(`Failed to read source map: ${mapInfo}: ${err}`)\n\t\t\t);\n\t\t\tcallback(null, parsed.body);\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember which file the source map came from.\n\t\tmapFile = resolved;\n\t}\n\n\t// Get context of the file that has the source map.\n\tconst mapFileContext = pathDirname(mapFile);\n\n\t// Try to parse the map data.\n\tlet mapData = null;\n\ttry {\n\t\tmapData = JSON.parse(mapCode);\n\t} catch (err) {\n\t\temitWarning(\n\t\t\tnew Exception(`Failed to parse source map: ${mapInfo}: ${err}`)\n\t\t);\n\t\tcallback(null, parsed.body);\n\t\treturn;\n\t}\n\n\t// Loop over the sections to ensure source content.\n\tconst mapMappings = sourceMapMappings(mapData);\n\tfor (const mapping of mapMappings) {\n\t\tconst {sources} = mapping;\n\t\tif (!sources) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst sourceRoot = mapping.sourceRoot || '.';\n\n\t\t// Get list of sources or create empty list.\n\t\tconst sourcesContent = (mapping.sourcesContent =\n\t\t\tmapping.sourcesContent || []);\n\n\t\t// Loop over the sources looking for missing content.\n\t\tfor (let i = 0; i < sources.length; i++) {\n\t\t\tconst source = sources[i];\n\t\t\tconst sourceContent = sourcesContent[i];\n\n\t\t\t// If has content or source is a data URI, nothing to read.\n\t\t\tif (\n\t\t\t\t// eslint-disable-next-line no-undefined\n\t\t\t\t(sourceContent !== null && sourceContent !== undefined) ||\n\t\t\t\tisDataURI(source)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Locate the source file.\n\t\t\tconst sourcePath = `${sourceRoot}/${source}`;\n\t\t\tconst sourceRequest = loaderUtils.urlToRequest(sourcePath);\n\n\t\t\t// Resolve source file or emit warning and skip.\n\t\t\tlet resolved = null;\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tresolved = await resolver(mapFileContext, sourceRequest);\n\t\t\t} catch (err) {\n\t\t\t\tconst info = `${mapInfo} -> ${sourceRequest}`;\n\t\t\t\temitWarning(\n\t\t\t\t\tnew Exception(\n\t\t\t\t\t\t`Failed to resolve source file: ${info}: ${err}`\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tcallback(null, parsed.body);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add the file as a dependency.\n\t\t\taddDependency(resolved);\n\n\t\t\t// Read the file or emit warning and skip.\n\t\t\tlet sourceCode = null;\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tsourceCode = await readFileAsync(resolved, 'utf-8');\n\t\t\t} catch (err) {\n\t\t\t\tconst info = `${mapInfo} -> ${sourceRequest}`;\n\t\t\t\temitWarning(\n\t\t\t\t\tnew Exception(`Failed to read source file: ${info}: ${err}`)\n\t\t\t\t);\n\t\t\t\tcallback(null, parsed.body);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add source content to the list.\n\t\t\tsourcesContent[i] = sourceCode;\n\t\t}\n\t}\n\n\t// Get the path to the source map, relative if possible.\n\tconst mapFilePath = pathRelativeIfSub(rootContext, mapFile);\n\n\t// Rebase the source map base to the source map file.\n\t// This way webpack will have the real path to the source file.\n\tsourceMapRebase(mapData, mapFilePath.replace(/\\\\/g, '/'));\n\n\t// All good, pass the body and parsed source map out.\n\tcallback(null, parsed.body, mapData);\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,IAAA,CAAAH,KAAA,EAAAI,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAC,YAAA,EAAAJ,GAAA;EAAA,IAAAA,GAAA,IAAAK,OAAA,IAAAA,OAAA,CAAAL,GAAA,MAAAL,KAAA,CAAAK,GAAA;EAAAH,MAAA,CAAAS,cAAA,CAAAD,OAAA,EAAAL,GAAA;IAAAO,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAb,KAAA,CAAAK,GAAA;IAAA;EAAA;AAAA;AAEA,IAAAS,KAAA,GAAAb,OAAA;AAEA,IAAAc,YAAA,GAAAC,sBAAA,CAAAf,OAAA;AAEA,IAAAgB,KAAA,GAAAhB,OAAA;AASA,IAAAiB,IAAA,GAAAjB,OAAA;AACA,IAAAkB,UAAA,GAAAlB,OAAA;AACA,IAAAmB,QAAA,GAAAnB,OAAA;AAGmB,SAAAe,uBAAAK,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAAA,SAAAG,mBAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,EAAAxB,GAAA,EAAAyB,GAAA,cAAAC,IAAA,GAAAN,GAAA,CAAApB,GAAA,EAAAyB,GAAA,OAAAE,KAAA,GAAAD,IAAA,CAAAC,KAAA,WAAAC,KAAA,IAAAN,MAAA,CAAAM,KAAA,iBAAAF,IAAA,CAAAG,IAAA,IAAAR,OAAA,CAAAM,KAAA,YAAAG,OAAA,CAAAT,OAAA,CAAAM,KAAA,EAAAI,IAAA,CAAAR,KAAA,EAAAC,MAAA;AAAA,SAAAQ,kBAAAC,EAAA,6BAAAC,IAAA,SAAAC,IAAA,GAAAC,SAAA,aAAAN,OAAA,WAAAT,OAAA,EAAAC,MAAA,QAAAF,GAAA,GAAAa,EAAA,CAAAI,KAAA,CAAAH,IAAA,EAAAC,IAAA,YAAAZ,MAAAI,KAAA,IAAAR,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,UAAAG,KAAA,cAAAH,OAAAc,GAAA,IAAAnB,kBAAA,CAAAC,GAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA,WAAAc,GAAA,KAAAf,KAAA,CAAAgB,SAAA;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACnB,OAAO,EAAE;EAChC,MAAMoB,GAAG,GAAGpB,OAAO;EACnB;IAAA,IAAAqB,IAAA,GAAAV,iBAAA,CAAO,WAAgBW,OAAO,EAAEC,OAAO,EAAE;MACxC,MAAMC,CAAC,SAAS,IAAIf,OAAO,CAAC,CAACT,OAAO,EAAEC,MAAM,KAAK;QAChDmB,GAAG,CAACE,OAAO,EAAEC,OAAO,EAAE,CAACN,GAAG,EAAEQ,MAAM,KAAK;UACtC,IAAIR,GAAG,EAAE;YACRhB,MAAM,CAACgB,GAAG,CAAC;YACX;UACD;UACAjB,OAAO,CAACyB,MAAM,CAAC;QAChB,CAAC,CAAC;MACH,CAAC,CAAC;MACF,OAAOD,CAAC;IACT,CAAC;IAAA,iBAAAE,EAAA,EAAAC,GAAA;MAAA,OAAAN,IAAA,CAAAL,KAAA,OAAAD,SAAA;IAAA;EAAA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,mBAAmBA,CAACC,QAAQ,EAAE;EACtC;IAAA,IAAAC,KAAA,GAAAnB,iBAAA,CAAO,WAAgBW,OAAO,EAAES,QAAQ,EAAE;MACzC,KAAK,MAAMR,OAAO,IAAIQ,QAAQ,EAAE;QAC/B,IAAI;UACH;UACA,aAAaF,QAAQ,CAACP,OAAO,EAAEC,OAAO,CAAC;QACxC,CAAC,CAAC,OAAON,GAAG,EAAE;UACb;QAAA;MAEF;MACA,OAAO,IAAI;IACZ,CAAC;IAAA,iBAAAe,GAAA,EAAAC,GAAA;MAAA,OAAAH,KAAA,CAAAd,KAAA,OAAAD,SAAA;IAAA;EAAA;AACF;;AAEA;AAAA,SAAAmB,SAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,KAAA,CAAAtB,KAAA,OAAAD,SAAA;AAAA;AAAA,SAAAuB,MAAA;EAAAA,KAAA,GAAA3B,iBAAA,CACe,WAAgB4B,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;IACjD;IACA,MAAM5B,IAAI,GAAG,IAAI;IAEjB,MAAM6B,QAAQ,GAAG7B,IAAI,CAAC8B,KAAK,CAAC,CAAC;IAE7B,MAAM;MACL3C,OAAO;MACP4C,aAAa;MACbC,WAAW;MACXC,SAAS;MACTxB,OAAO;MACPyB,WAAW;MACXC;IACD,CAAC,GAAGnC,IAAI;IAER,MAAMgB,QAAQ,GAAGV,cAAc,CAACnB,OAAO,CAAC;IACxC,MAAMiD,aAAa,GAAGrB,mBAAmB,CAACC,QAAQ,CAAC;;IAEnD;IACA,IAAIqB,YAAY,GAAG,IAAI;IACvB,IAAI;MACHA,YAAY,GAAG,IAAAC,wBAAkB,EAACZ,MAAM,EAAE,MAAM,CAAC;IAClD,CAAC,CAAC,OAAOtB,GAAG,EAAE;MACb4B,WAAW,CAAC,IAAIO,oBAAS,CAAE,oCAAmCnC,GAAI,EAAC,CAAC,CAAC;MACrE;MACAyB,QAAQ,CAAC,IAAI,EAAE,GAAG3B,SAAS,CAAC;MAC5B;IACD;;IAEA;IACA,MAAMsC,MAAM,GAAG,IAAAC,cAAY,EAACJ,YAAY,CAAC;IACzC,IAAI,CAACG,MAAM,EAAE;MACZ;MACAX,QAAQ,CAAC,IAAI,EAAE,GAAG3B,SAAS,CAAC;MAC5B;IACD;;IAEA;IACA,IAAI,CAAC+B,SAAS,EAAE;MACfJ,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,CAAC;MAC3B;IACD;IAEA,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAIC,OAAO,GAAG,IAAI;;IAElB;IACA,IAAI,IAAAC,eAAS,EAACN,MAAM,CAACO,GAAG,CAAC,EAAE;MAC1BH,OAAO,GAAG,IAAAI,kBAAY,EAACR,MAAM,CAACO,GAAG,EAAE,EAAE,EAAE,KAAK,CAAC;;MAE7C;MACA,MAAME,OAAO,GAAG,IAAAC,SAAI,EAACV,MAAM,CAACO,GAAG,CAAC;MAChC,IAAI,CAACE,OAAO,EAAE;QACbjB,WAAW,CAAC,IAAIO,oBAAS,CAAE,6BAA4BK,OAAQ,EAAC,CAAC,CAAC;QAClEf,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,CAAC;QAC3B;MACD;;MAEA;MACA,IAAI;QACHG,OAAO,GAAGI,OAAO,CAACP,IAAI,CAAC,CAAC,CAACS,QAAQ,CAACF,OAAO,CAACG,OAAO,CAAC;MACnD,CAAC,CAAC,OAAOhD,GAAG,EAAE;QACb4B,WAAW,CACV,IAAIO,oBAAS,CAAE,8BAA6BK,OAAQ,KAAIxC,GAAI,EAAC,CAC9D,CAAC;QACDyB,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,CAAC;QAC3B;MACD;;MAEA;MACAC,OAAO,GAAGR,YAAY;IACvB,CAAC,MAAM;MACNS,OAAO,GAAGJ,MAAM,CAACO,GAAG;;MAEpB;MACA,MAAMM,OAAO,GAAGb,MAAM,CAACO,GAAG,CAACO,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;;MAErD;MACA;MACA,MAAMC,QAAQ,GAAG,IAAAC,qBAAmB,EAACH,OAAO,CAAC;;MAE7C;MACA,MAAMI,eAAe,GAAGF,QAAQ,CAAC5B,GAAG,CAAC+B,CAAC,IAAIC,oBAAW,CAACC,YAAY,CAACF,CAAC,CAAC,CAAC;;MAEtE;MACA,MAAMG,QAAQ,SAASzB,aAAa,CAAC3B,OAAO,EAAEgD,eAAe,CAAC;;MAE9D;MACA,IAAI,CAACI,QAAQ,EAAE;QACd7B,WAAW,CACV,IAAIO,oBAAS,CAAE,iCAAgCK,OAAQ,EAAC,CACzD,CAAC;QACDf,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,CAAC;QAC3B;MACD;;MAEA;MACAX,aAAa,CAAC8B,QAAQ,CAAC;;MAEvB;MACA,IAAI;QACHhB,OAAO,SAAS,IAAAiB,mBAAa,EAACD,QAAQ,EAAE,OAAO,CAAC;MACjD,CAAC,CAAC,OAAOzD,GAAG,EAAE;QACb4B,WAAW,CACV,IAAIO,oBAAS,CAAE,8BAA6BK,OAAQ,KAAIxC,GAAI,EAAC,CAC9D,CAAC;QACDyB,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,CAAC;QAC3B;MACD;;MAEA;MACAC,OAAO,GAAGkB,QAAQ;IACnB;;IAEA;IACA,MAAME,cAAc,GAAG,IAAAC,aAAW,EAACrB,OAAO,CAAC;;IAE3C;IACA,IAAIsB,OAAO,GAAG,IAAI;IAClB,IAAI;MACHA,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACtB,OAAO,CAAC;IAC9B,CAAC,CAAC,OAAOzC,GAAG,EAAE;MACb4B,WAAW,CACV,IAAIO,oBAAS,CAAE,+BAA8BK,OAAQ,KAAIxC,GAAI,EAAC,CAC/D,CAAC;MACDyB,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,CAAC;MAC3B;IACD;;IAEA;IACA,MAAM0B,WAAW,GAAG,IAAAC,uBAAiB,EAACJ,OAAO,CAAC;IAC9C,KAAK,MAAMK,OAAO,IAAIF,WAAW,EAAE;MAClC,MAAM;QAACG;MAAO,CAAC,GAAGD,OAAO;MACzB,IAAI,CAACC,OAAO,EAAE;QACb;MACD;MACA,MAAMC,UAAU,GAAGF,OAAO,CAACE,UAAU,IAAI,GAAG;;MAE5C;MACA,MAAMC,cAAc,GAAIH,OAAO,CAACG,cAAc,GAC7CH,OAAO,CAACG,cAAc,IAAI,EAAG;;MAE9B;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;QACxC,MAAMhD,MAAM,GAAG6C,OAAO,CAACG,CAAC,CAAC;QACzB,MAAME,aAAa,GAAGH,cAAc,CAACC,CAAC,CAAC;;QAEvC;QACA;QACC;QACCE,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAKvE,SAAS,IACtD,IAAAyC,eAAS,EAACpB,MAAM,CAAC,EAChB;UACD;QACD;;QAEA;QACA,MAAMmD,UAAU,GAAI,GAAEL,UAAW,IAAG9C,MAAO,EAAC;QAC5C,MAAMoD,aAAa,GAAGnB,oBAAW,CAACC,YAAY,CAACiB,UAAU,CAAC;;QAE1D;QACA,IAAIhB,QAAQ,GAAG,IAAI;QACnB,IAAI;UACH;UACAA,QAAQ,SAAS7C,QAAQ,CAAC+C,cAAc,EAAEe,aAAa,CAAC;QACzD,CAAC,CAAC,OAAO1E,GAAG,EAAE;UACb,MAAMZ,IAAI,GAAI,GAAEoD,OAAQ,OAAMkC,aAAc,EAAC;UAC7C9C,WAAW,CACV,IAAIO,oBAAS,CACX,kCAAiC/C,IAAK,KAAIY,GAAI,EAChD,CACD,CAAC;UACDyB,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,CAAC;UAC3B;QACD;;QAEA;QACAX,aAAa,CAAC8B,QAAQ,CAAC;;QAEvB;QACA,IAAIkB,UAAU,GAAG,IAAI;QACrB,IAAI;UACH;UACAA,UAAU,SAAS,IAAAjB,mBAAa,EAACD,QAAQ,EAAE,OAAO,CAAC;QACpD,CAAC,CAAC,OAAOzD,GAAG,EAAE;UACb,MAAMZ,IAAI,GAAI,GAAEoD,OAAQ,OAAMkC,aAAc,EAAC;UAC7C9C,WAAW,CACV,IAAIO,oBAAS,CAAE,+BAA8B/C,IAAK,KAAIY,GAAI,EAAC,CAC5D,CAAC;UACDyB,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,CAAC;UAC3B;QACD;;QAEA;QACA+B,cAAc,CAACC,CAAC,CAAC,GAAGK,UAAU;MAC/B;IACD;;IAEA;IACA,MAAMC,WAAW,GAAG,IAAAC,uBAAiB,EAAC/C,WAAW,EAAES,OAAO,CAAC;;IAE3D;IACA;IACA,IAAAuC,qBAAe,EAACjB,OAAO,EAAEe,WAAW,CAAC1B,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;IAEzD;IACAzB,QAAQ,CAAC,IAAI,EAAEW,MAAM,CAACE,IAAI,EAAEuB,OAAO,CAAC;EACrC,CAAC;EAAA,OAAAxC,KAAA,CAAAtB,KAAA,OAAAD,SAAA;AAAA"}